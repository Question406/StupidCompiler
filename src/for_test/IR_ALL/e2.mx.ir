 @a 
 @i 
 @n 
 define i32 @main   {
 %main.entryBB1:
 preds:  
 doms:  %main.entryBB1  
 		 %t1  =  call getInt  
 		 @n  = move  %t1 
 		 @i  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 preds:  %forupdateBB1  %main.entryBB1  
 doms:  %forcondBB1  %main.entryBB1  
 		 %t2  = slt  @i   @n 
 		 br  %t2  %forbodyBB1 %afterForBB1 
 
 %forbodyBB1:
 preds:  %forcondBB1  
 doms:  %forbodyBB1  %forcondBB1  %main.entryBB1  
 		 %t3  =   mul  @i   4 
 		 %t4  =   add  %t3   4 
 		 %t5  =   add  @a   %t4 
 		 %t6  =  call getInt  
 		 store  %t5   %t6 
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %forbodyBB1  
 doms:  %forbodyBB1  %forupdateBB1  %forcondBB1  %main.entryBB1  
 		 @i  =   add  @i   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 preds:  %forcondBB1  
 doms:  %afterForBB1  %forcondBB1  %main.entryBB1  
 		 @i  = move  @n 
 		 jump %forcondBB2
 
 %forcondBB2:
 preds:  %forupdateBB2  %afterForBB1  
 doms:  %forcondBB2  %afterForBB1  %forcondBB1  %main.entryBB1  
 		 %t7  = sgt  @i   0 
 		 br  %t7  %forbodyBB2 %afterForBB2 
 
 %afterForBB2:
 preds:  %forcondBB2  
 doms:  %forcondBB2  %afterForBB1  %forcondBB1  %afterForBB2  %main.entryBB1  
 		 %mergedretVal1  = move  0 
 		 jump %main.exitBB1
 
 %forbodyBB2:
 preds:  %forcondBB2  
 doms:  %forcondBB2  %afterForBB1  %forbodyBB2  %forcondBB1  %main.entryBB1  
 		 %t8  =  call jud  @i   
 		 %t9  = sgt  %t8   0 
 		 br  %t9  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 preds:  %forbodyBB2  
 doms:  %forcondBB2  %afterForBB1  %forbodyBB2  %forcondBB1  %main.entryBB1  %if_thenBB1  
 		 %t10  =  call toString  @i   
 		 %t11  =  call print  %t10   
 		 %mergedretVal1  = move  0 
 		 jump %main.exitBB1
 
 %main.exitBB1:
 preds:  %afterForBB2  %if_thenBB1  
 doms:  %forcondBB2  %afterForBB1  %main.exitBB1  %forcondBB1  %main.entryBB1  
 		 ret  %mergedretVal1 
 
 %if_end1:
 preds:  %forbodyBB2  
 doms:  %forcondBB2  %afterForBB1  %forbodyBB2  %forcondBB1  %if_end1  %main.entryBB1  
 		 jump %forupdateBB2
 
 %forupdateBB2:
 preds:  %if_end1  
 doms:  %forcondBB2  %forupdateBB2  %afterForBB1  %forbodyBB2  %forcondBB1  %if_end1  %main.entryBB1  
 		 %t12  =   div  @i   2 
 		 @i  = move  %t12 
 		 jump %forcondBB2
 
 }
 define i32 @jud  %x1  {
 %jud.entryBB1:
 preds:  
 doms:  %jud.entryBB1  
 		 %i1  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 preds:  %forupdateBB1  %jud.entryBB1  
 doms:  %forcondBB1  %jud.entryBB1  
 		 %t1  =   div  @n   %x1 
 		 %t2  = slt  %i1   %t1 
 		 br  %t2  %forbodyBB1 %afterForBB1 
 
 %forbodyBB1:
 preds:  %forcondBB1  
 doms:  %forcondBB1  %jud.entryBB1  %forbodyBB1  
 		 %flag1  = move  0 
 		 %j1  = move  0 
 		 jump %forcondBB2
 
 %forcondBB2:
 preds:  %forupdateBB2  %forbodyBB1  
 doms:  %forcondBB1  %forbodyBB1  %jud.entryBB1  %forcondBB2  
 		 %t3  =   sub  %x1   1 
 		 %t4  = slt  %j1   %t3 
 		 br  %t4  %forbodyBB2 %afterForBB2 
 
 %afterForBB2:
 preds:  %forcondBB2  
 doms:  %forcondBB1  %jud.entryBB1  %afterForBB2  %forcondBB2  %forbodyBB1  
 		 br  %flag1  %if_end1 %if_thenBB1 
 
 %if_thenBB1:
 preds:  %afterForBB2  
 doms:  %forcondBB1  %jud.entryBB1  %if_thenBB1  %afterForBB2  %forcondBB2  %forbodyBB1  
 		 %mergedretVal1  = move  1 
 		 jump %jud.exitBB1
 
 %if_end1:
 preds:  %afterForBB2  
 doms:  %forcondBB1  %if_end1  %jud.entryBB1  %afterForBB2  %forcondBB2  %forbodyBB1  
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %if_end1  
 doms:  %forcondBB1  %if_end1  %forupdateBB1  %jud.entryBB1  %afterForBB2  %forcondBB2  %forbodyBB1  
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %forbodyBB2:
 preds:  %forcondBB2  
 doms:  %forcondBB1  %forbodyBB2  %jud.entryBB1  %forcondBB2  %forbodyBB1  
 		 %t5  =   mul  %i1   %x1 
 		 %t6  =   add  %t5   %j1 
 		 %t7  =   mul  %t6   4 
 		 %t8  =   add  %t7   4 
 		 %t9  =   add  @a   %t8 
 		 %t10  =   mul  %i1   %x1 
 		 %t11  =   add  %t10   %j1 
 		 %t12  =   add  %t11   1 
 		 %t13  =   mul  %t12   4 
 		 %t14  =   add  %t13   4 
 		 %t15  =   add  @a   %t14 
 		 %t16  = load  %t9 
 		 %t17  = load  %t15 
 		 %t18  = sgt  %t16   %t17 
 		 br  %t18  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 preds:  %forbodyBB2  
 doms:  %forcondBB1  %forbodyBB2  %jud.entryBB1  %if_thenBB2  %forcondBB2  %forbodyBB1  
 		 %flag1  = move  1 
 		 jump %if_end2
 
 %if_end2:
 preds:  %forbodyBB2  %if_thenBB2  
 doms:  %forcondBB1  %forbodyBB2  %jud.entryBB1  %if_end2  %forcondBB2  %forbodyBB1  
 		 jump %forupdateBB2
 
 %forupdateBB2:
 preds:  %if_end2  
 doms:  %forcondBB1  %forbodyBB2  %jud.entryBB1  %if_end2  %forcondBB2  %forupdateBB2  %forbodyBB1  
 		 %j1  =   add  %j1   1 
 		 jump %forcondBB2
 
 %afterForBB1:
 preds:  %forcondBB1  
 doms:  %forcondBB1  %jud.entryBB1  %afterForBB1  
 		 %mergedretVal1  = move  0 
 		 jump %jud.exitBB1
 
 %jud.exitBB1:
 preds:  %afterForBB1  %if_thenBB1  
 doms:  %forcondBB1  %jud.entryBB1  %jud.exitBB1  
 		 ret  %mergedretVal1 
 
 }
 define void @__init   {
 %__init.entryBB1:
 preds:  
 doms:  %__init.entryBB1  
 		 %t1  =   mul  20   4 
 		 %t1  =   add  %t1   4 
 		 %t2  = alloc  %t1 
 		 store  %t2   20 
 		 @a  = move  %t2 
 		 %t3  =  call main  
 		 ret  
 
 }
