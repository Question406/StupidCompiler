 @constStr_0 = " "
 @constStr_1 = "\n"
 @r 
 @ch 
 @w 
 @l 
 @M 
 @N 
 define i32 @main   {
 %main.entryBB1:
 preds:  
 doms:  %main.entryBB1  
 		 %t1  =  call getInt  
 		 @N  = move  %t1 
 		 %t2  =  call getInt  
 		 @M  = move  %t2 
 		 %t3  =  call getString  
 		 @ch  = move  %t3 
 		 %t4  =   add  @N   @M 
 		 %t5  =   add  %t4   5 
 		 %t6  =   mul  %t5   4 
 		 %t6  =   add  %t6   4 
 		 %t7  = alloc  %t6 
 		 store  %t7   %t5 
 		 @l  = move  %t7 
 		 %t8  =   add  @N   @M 
 		 %t9  =   add  %t8   5 
 		 %t10  =   mul  %t9   4 
 		 %t10  =   add  %t10   4 
 		 %t11  = alloc  %t10 
 		 store  %t11   %t9 
 		 @r  = move  %t11 
 		 %t12  =   add  @N   @M 
 		 %t13  =   add  %t12   5 
 		 %t14  =   mul  %t13   4 
 		 %t14  =   add  %t14   4 
 		 %t15  = alloc  %t14 
 		 store  %t15   %t13 
 		 @w  = move  %t15 
 		 %i1  = move  1 
 		 jump %forcondBB1
 
 %forcondBB1:
 preds:  %forupdateBB1  %main.entryBB1  
 doms:  %forcondBB1  %main.entryBB1  
 		 %t16  = sle  %i1   @N 
 		 br  %t16  %forbodyBB1 %afterForBB1 
 
 %forbodyBB1:
 preds:  %forcondBB1  
 doms:  %forbodyBB1  %forcondBB1  %main.entryBB1  
 		 %t17  =   mul  %i1   4 
 		 %t18  =   add  %t17   4 
 		 %t19  =   add  @w   %t18 
 		 %t20  =  call getInt  
 		 store  %t19   %t20 
 		 %t21  =   mul  %i1   4 
 		 %t22  =   add  %t21   4 
 		 %t23  =   add  @l   %t22 
 		 store  %t23   0 
 		 %t24  =   mul  %i1   4 
 		 %t25  =   add  %t24   4 
 		 %t26  =   add  @r   %t25 
 		 store  %t26   0 
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %forbodyBB1  
 doms:  %forupdateBB1  %forbodyBB1  %forcondBB1  %main.entryBB1  
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 preds:  %forcondBB1  
 doms:  %afterForBB1  %forcondBB1  %main.entryBB1  
 		 %i1  = move  1 
 		 jump %forcondBB2
 
 %forcondBB2:
 preds:  %afterForBB1  %forupdateBB2  
 doms:  %afterForBB1  %forcondBB1  %main.entryBB1  %forcondBB2  
 		 %t27  = sle  %i1   @M 
 		 br  %t27  %forbodyBB2 %afterForBB2 
 
 %forbodyBB2:
 preds:  %forcondBB2  
 doms:  %afterForBB1  %forbodyBB2  %forcondBB1  %main.entryBB1  %forcondBB2  
 		 %t28  =   add  %i1   @N 
 		 %t29  =   mul  %t28   4 
 		 %t30  =   add  %t29   4 
 		 %t31  =   add  @w   %t30 
 		 %t32  =   sub  %i1   1 
 		 %t33  =  call string.ord  @ch %t32   
 		 store  %t31   %t33 
 		 %t34  =   add  %i1   @N 
 		 %t35  =   mul  %t34   4 
 		 %t36  =   add  %t35   4 
 		 %t37  =   add  @l   %t36 
 		 store  %t37   0 
 		 %t38  =   add  %i1   @N 
 		 %t39  =   mul  %t38   4 
 		 %t40  =   add  %t39   4 
 		 %t41  =   add  @r   %t40 
 		 store  %t41   0 
 		 jump %forupdateBB2
 
 %forupdateBB2:
 preds:  %forbodyBB2  
 doms:  %afterForBB1  %forupdateBB2  %forbodyBB2  %forcondBB1  %main.entryBB1  %forcondBB2  
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB2
 
 %afterForBB2:
 preds:  %forcondBB2  
 doms:  %afterForBB1  %afterForBB2  %forcondBB1  %main.entryBB1  %forcondBB2  
 		 %rt01  = move  1 
 		 %t42  =   add  @N   1 
 		 %rt11  = move  %t42 
 		 %i1  = move  2 
 		 jump %forcondBB3
 
 %forcondBB3:
 preds:  %afterForBB2  %forupdateBB3  
 doms:  %afterForBB1  %afterForBB2  %forcondBB1  %main.entryBB1  %forcondBB2  %forcondBB3  
 		 %t43  = sle  %i1   @N 
 		 br  %t43  %forbodyBB3 %afterForBB3 
 
 %afterForBB3:
 preds:  %forcondBB3  
 doms:  %afterForBB1  %afterForBB2  %forcondBB1  %main.entryBB1  %forcondBB2  %forcondBB3  %afterForBB3  
 		 %t44  =   add  @N   2 
 		 %i1  = move  %t44 
 		 jump %forcondBB4
 
 %forcondBB4:
 preds:  %forupdateBB4  %afterForBB3  
 doms:  %afterForBB1  %forcondBB4  %forcondBB3  %afterForBB3  %afterForBB2  %forcondBB1  %main.entryBB1  %forcondBB2  
 		 %t45  =   add  @N   @M 
 		 %t46  = sle  %i1   %t45 
 		 br  %t46  %forbodyBB4 %afterForBB4 
 
 %forbodyBB4:
 preds:  %forcondBB4  
 doms:  %afterForBB1  %afterForBB2  %forcondBB4  %forbodyBB4  %forcondBB1  %main.entryBB1  %forcondBB2  %forcondBB3  %afterForBB3  
 		 %t47  =  call merge  %rt11   %i1   
 		 %rt11  = move  %t47 
 		 jump %forupdateBB4
 
 %forupdateBB4:
 preds:  %forbodyBB4  
 doms:  %afterForBB1  %afterForBB2  %forcondBB4  %forbodyBB4  %forcondBB1  %main.entryBB1  %forcondBB2  %forcondBB3  %forupdateBB4  %afterForBB3  
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB4
 
 %afterForBB4:
 preds:  %forcondBB4  
 doms:  %afterForBB1  %afterForBB4  %afterForBB2  %forcondBB4  %forcondBB1  %main.entryBB1  %forcondBB2  %forcondBB3  %afterForBB3  
 		 %t48  =   mul  %rt01   4 
 		 %t49  =   add  %t48   4 
 		 %t50  =   add  @w   %t49 
 		 %t51  = load  %t50 
 		 %t52  =  call toString  %t51   
 		 %t53  =  call print  %t52   
 		 %t54  =  call print  @constStr_0   
 		 %t55  =   sub  %rt11   @N 
 		 %t56  =   sub  %t55   1 
 		 %t57  =   sub  %rt11   @N 
 		 %t58  =  call string.substring  @ch %t56   %t57   
 		 %t59  =  call print  %t58   
 		 %t60  =  call print  @constStr_1   
 		 %t61  =  call merge  %rt01   %rt11   
 		 %t62  =  call toString  %t61   
 		 %t63  =  call println  %t62   
 		 ret  0 
 
 %forbodyBB3:
 preds:  %forcondBB3  
 doms:  %afterForBB1  %afterForBB2  %forcondBB1  %main.entryBB1  %forcondBB2  %forcondBB3  %forbodyBB3  
 		 %t64  =  call merge  %rt01   %i1   
 		 %rt01  = move  %t64 
 		 jump %forupdateBB3
 
 %forupdateBB3:
 preds:  %forbodyBB3  
 doms:  %afterForBB1  %afterForBB2  %forcondBB1  %main.entryBB1  %forupdateBB3  %forcondBB2  %forcondBB3  %forbodyBB3  
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB3
 
 }
 define i32 @merge  %x1 %y1  {
 %merge.entryBB1:
 preds:  
 doms:  %merge.entryBB1  
 		 %t1  = seq  0   %x1 
 		 br  %t1  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 preds:  %merge.entryBB1  
 doms:  %merge.entryBB1  %if_thenBB1  
 		 %mergedretVal1  = move  %y1 
 		 jump %merge.exitBB1
 
 %if_end1:
 preds:  %merge.entryBB1  
 doms:  %merge.entryBB1  %if_end1  
 		 %t2  = seq  0   %y1 
 		 br  %t2  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 preds:  %if_end1  
 doms:  %if_thenBB2  %merge.entryBB1  %if_end1  
 		 %mergedretVal1  = move  %x1 
 		 jump %merge.exitBB1
 
 %if_end2:
 preds:  %if_end1  
 doms:  %if_end2  %merge.entryBB1  %if_end1  
 		 %t3  =   mul  %x1   4 
 		 %t4  =   add  %t3   4 
 		 %t5  =   add  @w   %t4 
 		 %t6  =   mul  %y1   4 
 		 %t7  =   add  %t6   4 
 		 %t8  =   add  @w   %t7 
 		 %t9  = load  %t5 
 		 %t10  = load  %t8 
 		 %t11  = slt  %t9   %t10 
 		 br  %t11  %if_thenBB3 %if_end3 
 
 %if_thenBB3:
 preds:  %if_end2  
 doms:  %if_end2  %merge.entryBB1  %if_end1  %if_thenBB3  
 		 %e1  = move  %x1 
 		 %x1  = move  %y1 
 		 %y1  = move  %e1 
 		 jump %if_end3
 
 %if_end3:
 preds:  %if_end2  %if_thenBB3  
 doms:  %if_end2  %if_end3  %merge.entryBB1  %if_end1  
 		 %t12  =   mul  %x1   4 
 		 %t13  =   add  %t12   4 
 		 %t14  =   add  @r   %t13 
 		 %t15  =   mul  %x1   4 
 		 %t16  =   add  %t15   4 
 		 %t17  =   add  @r   %t16 
 		 %t18  = load  %t17 
 		 %t19  =  call merge  %t18   %y1   
 		 store  %t14   %t19 
 		 %t20  =   mul  %x1   4 
 		 %t21  =   add  %t20   4 
 		 %t22  =   add  @l   %t21 
 		 %t23  = load  %t22 
 		 %e2  = move  %t23 
 		 %t24  =   mul  %x1   4 
 		 %t25  =   add  %t24   4 
 		 %t26  =   add  @l   %t25 
 		 %t27  =   mul  %x1   4 
 		 %t28  =   add  %t27   4 
 		 %t29  =   add  @r   %t28 
 		 %t30  = load  %t29 
 		 store  %t26   %t30 
 		 %t31  =   mul  %x1   4 
 		 %t32  =   add  %t31   4 
 		 %t33  =   add  @r   %t32 
 		 store  %t33   %e2 
 		 %mergedretVal1  = move  %x1 
 		 jump %merge.exitBB1
 
 %merge.exitBB1:
 preds:  %if_end3  %if_thenBB2  %if_thenBB1  
 doms:  %merge.entryBB1  %merge.exitBB1  
 		 ret  %mergedretVal1 
 
 }
 define void @__init   {
 %__init.entryBB1:
 preds:  
 doms:  %__init.entryBB1  
 		 %t1  =  call main  
 		 ret  
 
 }
