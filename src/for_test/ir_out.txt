 @constStr_0 = ""
 @constStr_1 = "Invalid input"
 @constStr_2 = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
 @constStr_3 = "Not Found!"
 @constStr_4 = "nChunk > MAXCHUNK!"
 @outputBuffer 
 @asciiTable 
 @inputBuffer 
 @MAXCHUNK 
 @chunks 
 @MAXLENGTH 
 define i32 @main   {
 %main.entryBB1:
 		 jump %whileCondBB1
 
 %whileCondBB1:
 		 br  1  %whileBodyBB1 %afterWhileBB1 
 		 jump %whileBodyBB1
 
 %whileBodyBB1:
 		 %t1  =  call getInt  
 		 %op1  = move  %t1 
 		 %t2  = seq  %op1   0 
 		 br  %t2  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 jump %afterWhileBB1
 
 %if_end1:
 		 %t3  = seq  %op1   1 
 		 br  %t3  %if_thenBB2 %if_elseBB1 
 
 %if_thenBB2:
 		 %t4  =  call getString  
 		 %input1  = move  %t4 
 		 call computeSHA1  %input1   
 		 jump %if_end2
 
 %if_elseBB1:
 		 %t5  = seq  %op1   2 
 		 br  %t5  %if_thenBB3 %if_end3 
 
 %if_thenBB3:
 		 %t6  =  call getString  
 		 %input1  = move  %t6 
 		 call crackSHA1  %input1   
 		 jump %if_end3
 
 %if_end3:
 		 jump %if_end2
 
 %if_end2:
 		 jump %whileCondBB1
 
 %afterWhileBB1:
 		 ret  0 
 
 }
 define i32 @hex2int  %x1  {
 %hex2int.entryBB1:
 		 %result1  = move  0 
 		 %i1  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t1  =  call string.length  %x1 
 		 %t2  = slt  %i1   %t1 
 		 br  %t2  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %t3  =  call string.ord  %x1 %i1   
 		 %digit1  = move  %t3 
 		 %t4  = sge  %digit1   48 
 		 br  %t4  %ifTrue1 %if_elseBB1 
 
 %ifTrue1:
 		 %t5  = sle  %digit1   57 
 		 br  %t5  %if_thenBB1 %if_elseBB1 
 
 %if_thenBB1:
 		 %t6  =   mul  %result1   16 
 		 %t7  =   add  %t6   %digit1 
 		 %t8  =   sub  %t7   48 
 		 %result1  = move  %t8 
 		 jump %if_end1
 
 %if_elseBB1:
 		 %t9  = sge  %digit1   65 
 		 br  %t9  %ifTrue2 %if_elseBB2 
 
 %ifTrue2:
 		 %t10  = sle  %digit1   70 
 		 br  %t10  %if_thenBB2 %if_elseBB2 
 
 %if_thenBB2:
 		 %t11  =   mul  %result1   16 
 		 %t12  =   add  %t11   %digit1 
 		 %t13  =   sub  %t12   65 
 		 %t14  =   add  %t13   10 
 		 %result1  = move  %t14 
 		 jump %if_end2
 
 %if_elseBB2:
 		 %t15  = sge  %digit1   97 
 		 br  %t15  %ifTrue3 %if_elseBB3 
 
 %ifTrue3:
 		 %t16  = sle  %digit1   102 
 		 br  %t16  %if_thenBB3 %if_elseBB3 
 
 %if_thenBB3:
 		 %t17  =   mul  %result1   16 
 		 %t18  =   add  %t17   %digit1 
 		 %t19  =   sub  %t18   97 
 		 %t20  =   add  %t19   10 
 		 %result1  = move  %t20 
 		 jump %if_end3
 
 %if_elseBB3:
 		 %mergedretVal1  = move  0 
 		 jump %hex2int.exitBB1
 
 %if_end3:
 		 jump %if_end2
 
 %if_end2:
 		 jump %if_end1
 
 %if_end1:
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 %mergedretVal1  = move  %result1 
 		 jump %hex2int.exitBB1
 
 %hex2int.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define void @computeSHA1  %input1  {
 %computeSHA1.entryBB1:
 		 %i1  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t1  =  call string.length  %input1 
 		 %t2  = slt  %i1   %t1 
 		 br  %t2  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %t3  =   mul  %i1   4 
 		 %t4  =   add  %t3   4 
 		 %t5  =   add  @inputBuffer   %t4 
 		 %t6  =  call string.ord  %input1 %i1   
 		 store  %t5   %t6 
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 %t7  =  call string.length  %input1 
 		 %t8  =  call sha1  @inputBuffer   %t7   
 		 %result1  = move  %t8 
 		 %i1  = move  0 
 		 jump %forcondBB2
 
 %forcondBB2:
 		 %t9  =  call array.size  %result1 
 		 %t10  = slt  %i1   %t9 
 		 br  %t10  %forbodyBB2 %afterForBB2 
 		 jump %forbodyBB2
 
 %forbodyBB2:
 		 %t11  =   mul  %i1   4 
 		 %t12  =   add  %t11   4 
 		 %t13  =   add  %result1   %t12 
 		 %t14  = load  %t13 
 		 %t15  =  call toStringHex  %t14   
 		 %t16  =  call print  %t15   
 		 jump %forupdateBB2
 
 %forupdateBB2:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB2
 
 %afterForBB2:
 		 %t17  =  call println  @constStr_0   
 		 ret  
 
 }
 define i32 @array_equal  %a1 %b1  {
 %array_equal.entryBB1:
 		 %t1  =  call array.size  %a1 
 		 %t2  =  call array.size  %b1 
 		 %t3  = sne  %t1   %t2 
 		 br  %t3  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 %mergedretVal1  = move  0 
 		 jump %array_equal.exitBB1
 
 %if_end1:
 		 %i1  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t4  =  call array.size  %a1 
 		 %t5  = slt  %i1   %t4 
 		 br  %t5  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %t6  =   mul  %i1   4 
 		 %t7  =   add  %t6   4 
 		 %t8  =   add  %a1   %t7 
 		 %t9  =   mul  %i1   4 
 		 %t10  =   add  %t9   4 
 		 %t11  =   add  %b1   %t10 
 		 %t12  = load  %t8 
 		 %t13  = load  %t11 
 		 %t14  = sne  %t12   %t13 
 		 br  %t14  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 		 %mergedretVal1  = move  0 
 		 jump %array_equal.exitBB1
 
 %if_end2:
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 %mergedretVal1  = move  1 
 		 jump %array_equal.exitBB1
 
 %array_equal.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define i32 @nextLetter  %now1  {
 %nextLetter.entryBB1:
 		 %t1  = seq  %now1   122 
 		 br  %t1  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 %t2  =   sub  0   1 
 		 %mergedretVal1  = move  %t2 
 		 jump %nextLetter.exitBB1
 
 %if_end1:
 		 %t3  = seq  %now1   90 
 		 br  %t3  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 		 %mergedretVal1  = move  97 
 		 jump %nextLetter.exitBB1
 
 %if_end2:
 		 %t4  = seq  %now1   57 
 		 br  %t4  %if_thenBB3 %if_end3 
 
 %if_thenBB3:
 		 %mergedretVal1  = move  65 
 		 jump %nextLetter.exitBB1
 
 %if_end3:
 		 %t5  =   add  %now1   1 
 		 %mergedretVal1  = move  %t5 
 		 jump %nextLetter.exitBB1
 
 %nextLetter.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define i32 @add  %x1 %y1  {
 %add.entryBB1:
 		 %t1  =   and  %x1   65535 
 		 %t2  =   and  %y1   65535 
 		 %t3  =   add  %t1   %t2 
 		 %low1  = move  %t3 
 		 %t4  =   shr  %x1   16 
 		 %t5  =   and  %t4   65535 
 		 %t6  =   shr  %y1   16 
 		 %t7  =   and  %t6   65535 
 		 %t8  =   add  %t5   %t7 
 		 %t9  =   shr  %low1   16 
 		 %t10  =   add  %t8   %t9 
 		 %t11  =   and  %t10   65535 
 		 %high1  = move  %t11 
 		 %t12  =   shl  %high1   16 
 		 %t13  =   and  %low1   65535 
 		 %t14  =   or  %t12   %t13 
 		 ret  %t14 
 
 }
 define i32 @nextText  %now1 %length1  {
 %nextText.entryBB1:
 		 %t1  =   sub  %length1   1 
 		 %i1  = move  %t1 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t2  = sge  %i1   0 
 		 br  %t2  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %t3  =   mul  %i1   4 
 		 %t4  =   add  %t3   4 
 		 %t5  =   add  %now1   %t4 
 		 %t6  =   mul  %i1   4 
 		 %t7  =   add  %t6   4 
 		 %t8  =   add  %now1   %t7 
 		 %t9  = load  %t8 
 		 %t10  =  call nextLetter  %t9   
 		 store  %t5   %t10 
 		 %t11  =   mul  %i1   4 
 		 %t12  =   add  %t11   4 
 		 %t13  =   add  %now1   %t12 
 		 %t14  =   sub  0   1 
 		 %t15  = load  %t13 
 		 %t16  = seq  %t15   %t14 
 		 br  %t16  %if_thenBB1 %if_elseBB1 
 
 %if_thenBB1:
 		 %t17  =   mul  %i1   4 
 		 %t18  =   add  %t17   4 
 		 %t19  =   add  %now1   %t18 
 		 store  %t19   48 
 		 jump %if_end1
 
 %if_elseBB1:
 		 %mergedretVal1  = move  1 
 		 jump %nextText.exitBB1
 
 %if_end1:
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %i1  =   sub  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 %mergedretVal1  = move  0 
 		 jump %nextText.exitBB1
 
 %nextText.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define void @crackSHA1  %input1  {
 %crackSHA1.entryBB1:
 		 %t1  =   mul  5   4 
 		 %t1  =   add  %t1   4 
 		 %t2  = alloc  %t1 
 		 store  %t2   5 
 		 %target1  = move  %t2 
 		 %t3  =  call string.length  %input1 
 		 %t4  = sne  %t3   40 
 		 br  %t4  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 %t5  =  call println  @constStr_1   
 		 jump %crackSHA1.exitBB1
 
 %if_end1:
 		 %i1  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t6  = slt  %i1   5 
 		 br  %t6  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %t7  =   mul  %i1   4 
 		 %t8  =   add  %t7   4 
 		 %t9  =   add  %target1   %t8 
 		 store  %t9   0 
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 %i1  = move  0 
 		 jump %forcondBB2
 
 %forcondBB2:
 		 %t10  = slt  %i1   40 
 		 br  %t10  %forbodyBB2 %afterForBB2 
 		 jump %forbodyBB2
 
 %forbodyBB2:
 		 %t11  =   div  %i1   8 
 		 %t12  =   mul  %t11   4 
 		 %t13  =   add  %t12   4 
 		 %t14  =   add  %target1   %t13 
 		 %t15  =   div  %i1   8 
 		 %t16  =   mul  %t15   4 
 		 %t17  =   add  %t16   4 
 		 %t18  =   add  %target1   %t17 
 		 %t19  =   add  %i1   4 
 		 %t20  =  call string.substring  %input1 %i1   %t19   
 		 %t21  =  call hex2int  %t20   
 		 %t22  =   div  %i1   4 
 		 %t23  =   mod  %t22   2 
 		 %t24  =   sub  1   %t23 
 		 %t25  =   mul  %t24   16 
 		 %t26  =   shl  %t21   %t25 
 		 %t27  = load  %t18 
 		 %t28  =   or  %t27   %t26 
 		 store  %t14   %t28 
 		 jump %forupdateBB2
 
 %forupdateBB2:
 		 %t29  =   add  %i1   4 
 		 %i1  = move  %t29 
 		 jump %forcondBB2
 
 %afterForBB2:
 		 %MAXDIGIT1  = move  4 
 		 %digit1  = move  1 
 		 jump %forcondBB3
 
 %forcondBB3:
 		 %t30  = sle  %digit1   %MAXDIGIT1 
 		 br  %t30  %forbodyBB3 %afterForBB3 
 		 jump %forbodyBB3
 
 %forbodyBB3:
 		 %i1  = move  0 
 		 jump %forcondBB4
 
 %forcondBB4:
 		 %t31  = slt  %i1   %digit1 
 		 br  %t31  %forbodyBB4 %afterForBB4 
 		 jump %forbodyBB4
 
 %forbodyBB4:
 		 %t32  =   mul  %i1   4 
 		 %t33  =   add  %t32   4 
 		 %t34  =   add  @inputBuffer   %t33 
 		 store  %t34   48 
 		 jump %forupdateBB3
 
 %forupdateBB3:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB4
 
 %afterForBB4:
 		 jump %whileCondBB1
 
 %whileCondBB1:
 		 br  1  %whileBodyBB1 %afterWhileBB1 
 		 jump %whileBodyBB1
 
 %whileBodyBB1:
 		 %t35  =  call sha1  @inputBuffer   %digit1   
 		 %out1  = move  %t35 
 		 %t36  =  call array_equal  %out1   %target1   
 		 br  %t36  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 		 %i1  = move  0 
 		 jump %forcondBB5
 
 %forcondBB5:
 		 %t37  = slt  %i1   %digit1 
 		 br  %t37  %forbodyBB5 %afterForBB5 
 		 jump %forbodyBB5
 
 %forbodyBB5:
 		 %t38  =   mul  %i1   4 
 		 %t39  =   add  %t38   4 
 		 %t40  =   add  @inputBuffer   %t39 
 		 %t41  = load  %t40 
 		 %t42  =  call int2chr  %t41   
 		 %t43  =  call print  %t42   
 		 jump %forupdateBB4
 
 %forupdateBB4:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB5
 
 %afterForBB5:
 		 %t44  =  call println  @constStr_0   
 		 jump %crackSHA1.exitBB1
 
 %if_end2:
 		 %t45  =  call nextText  @inputBuffer   %digit1   
 		 br  %t45  %if_end3 %if_thenBB3 
 
 %if_thenBB3:
 		 jump %afterWhileBB1
 
 %if_end3:
 		 jump %whileCondBB1
 
 %afterWhileBB1:
 		 jump %forupdateBB5
 
 %forupdateBB5:
 		 %digit1  =   add  %digit1   1 
 		 jump %forcondBB3
 
 %afterForBB3:
 		 %t46  =  call println  @constStr_3   
 		 jump %crackSHA1.exitBB1
 
 %crackSHA1.exitBB1:
 		 ret  
 
 }
 define i32 @toStringHex  %x1  {
 %toStringHex.entryBB1:
 		 %ret1  = move  @constStr_0 
 		 %i1  = move  28 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t1  = sge  %i1   0 
 		 br  %t1  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %t2  =   shr  %x1   %i1 
 		 %t3  =   and  %t2   15 
 		 %digit1  = move  %t3 
 		 %t4  = slt  %digit1   10 
 		 br  %t4  %if_thenBB1 %if_elseBB1 
 
 %if_thenBB1:
 		 %t5  =   add  48   %digit1 
 		 %t6  =  call int2chr  %t5   
 		 %t7  =  call string.add  %ret1   %t6   
 		 %ret1  = move  %t7 
 		 jump %if_end1
 
 %if_elseBB1:
 		 %t8  =   add  65   %digit1 
 		 %t9  =   sub  %t8   10 
 		 %t10  =  call int2chr  %t9   
 		 %t11  =  call string.add  %ret1   %t10   
 		 %ret1  = move  %t11 
 		 jump %if_end1
 
 %if_end1:
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %t12  =   sub  %i1   4 
 		 %i1  = move  %t12 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 ret  %ret1 
 
 }
 define i32 @sha1  %input1 %length1  {
 %sha1.entryBB1:
 		 %t1  =   add  %length1   64 
 		 %t2  =   sub  %t1   56 
 		 %t3  =   div  %t2   64 
 		 %t4  =   add  %t3   1 
 		 %nChunk1  = move  %t4 
 		 %t5  = sgt  %nChunk1   @MAXCHUNK 
 		 br  %t5  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 %t6  =  call println  @constStr_4   
 		 %mergedretVal1  = move  0 
 		 jump %sha1.exitBB1
 
 %if_end1:
 		 %i1  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t7  = slt  %i1   %nChunk1 
 		 br  %t7  %forbodyBB1 %afterForBB1 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 		 %j1  = move  0 
 		 jump %forcondBB2
 
 %forcondBB2:
 		 %t8  = slt  %j1   80 
 		 br  %t8  %forbodyBB2 %afterForBB2 
 		 jump %forbodyBB2
 
 %forbodyBB2:
 		 %t9  =   mul  %i1   4 
 		 %t10  =   add  %t9   4 
 		 %t11  =   add  @chunks   %t10 
 		 %t12  = load  %t11 
 		 %t13  =   mul  %j1   4 
 		 %t14  =   add  %t13   4 
 		 %t15  =   add  %t12   %t14 
 		 store  %t15   0 
 		 jump %forupdateBB1
 
 %forupdateBB1:
 		 %j1  =   add  %j1   1 
 		 jump %forcondBB2
 
 %afterForBB2:
 		 jump %forupdateBB2
 
 %forupdateBB2:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 %i1  = move  0 
 		 jump %forcondBB3
 
 %forcondBB3:
 		 %t16  = slt  %i1   %length1 
 		 br  %t16  %forbodyBB3 %afterForBB3 
 		 jump %forbodyBB3
 
 %forbodyBB3:
 		 %t17  =   div  %i1   64 
 		 %t18  =   mul  %t17   4 
 		 %t19  =   add  %t18   4 
 		 %t20  =   add  @chunks   %t19 
 		 %t21  =   mod  %i1   64 
 		 %t22  =   div  %t21   4 
 		 %t23  = load  %t20 
 		 %t24  =   mul  %t22   4 
 		 %t25  =   add  %t24   4 
 		 %t26  =   add  %t23   %t25 
 		 %t27  =   div  %i1   64 
 		 %t28  =   mul  %t27   4 
 		 %t29  =   add  %t28   4 
 		 %t30  =   add  @chunks   %t29 
 		 %t31  =   mod  %i1   64 
 		 %t32  =   div  %t31   4 
 		 %t33  = load  %t30 
 		 %t34  =   mul  %t32   4 
 		 %t35  =   add  %t34   4 
 		 %t36  =   add  %t33   %t35 
 		 %t37  =   mul  %i1   4 
 		 %t38  =   add  %t37   4 
 		 %t39  =   add  %input1   %t38 
 		 %t40  =   mod  %i1   4 
 		 %t41  =   sub  3   %t40 
 		 %t42  =   mul  %t41   8 
 		 %t43  = load  %t39 
 		 %t44  =   shl  %t43   %t42 
 		 %t45  = load  %t36 
 		 %t46  =   or  %t45   %t44 
 		 store  %t26   %t46 
 		 jump %forupdateBB3
 
 %forupdateBB3:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB3
 
 %afterForBB3:
 		 %t47  =   div  %i1   64 
 		 %t48  =   mul  %t47   4 
 		 %t49  =   add  %t48   4 
 		 %t50  =   add  @chunks   %t49 
 		 %t51  =   mod  %i1   64 
 		 %t52  =   div  %t51   4 
 		 %t53  = load  %t50 
 		 %t54  =   mul  %t52   4 
 		 %t55  =   add  %t54   4 
 		 %t56  =   add  %t53   %t55 
 		 %t57  =   div  %i1   64 
 		 %t58  =   mul  %t57   4 
 		 %t59  =   add  %t58   4 
 		 %t60  =   add  @chunks   %t59 
 		 %t61  =   mod  %i1   64 
 		 %t62  =   div  %t61   4 
 		 %t63  = load  %t60 
 		 %t64  =   mul  %t62   4 
 		 %t65  =   add  %t64   4 
 		 %t66  =   add  %t63   %t65 
 		 %t67  =   mod  %i1   4 
 		 %t68  =   sub  3   %t67 
 		 %t69  =   mul  %t68   8 
 		 %t70  =   shl  128   %t69 
 		 %t71  = load  %t66 
 		 %t72  =   or  %t71   %t70 
 		 store  %t56   %t72 
 		 %t73  =   sub  %nChunk1   1 
 		 %t74  =   mul  %t73   4 
 		 %t75  =   add  %t74   4 
 		 %t76  =   add  @chunks   %t75 
 		 %t77  = load  %t76 
 		 %t78  =   mul  15   4 
 		 %t79  =   add  %t78   4 
 		 %t80  =   add  %t77   %t79 
 		 %t81  =   shl  %length1   3 
 		 store  %t80   %t81 
 		 %t82  =   sub  %nChunk1   1 
 		 %t83  =   mul  %t82   4 
 		 %t84  =   add  %t83   4 
 		 %t85  =   add  @chunks   %t84 
 		 %t86  = load  %t85 
 		 %t87  =   mul  14   4 
 		 %t88  =   add  %t87   4 
 		 %t89  =   add  %t86   %t88 
 		 %t90  =   shr  %length1   29 
 		 %t91  =   and  %t90   7 
 		 store  %t89   %t91 
 		 %h01  = move  1732584193 
 		 %t92  =  call lohi  43913   61389   
 		 %h11  = move  %t92 
 		 %t93  =  call lohi  56574   39098   
 		 %h21  = move  %t93 
 		 %h31  = move  271733878 
 		 %t94  =  call lohi  57840   50130   
 		 %h41  = move  %t94 
 		 %i1  = move  0 
 		 jump %forcondBB4
 
 %forcondBB4:
 		 %t95  = slt  %i1   %nChunk1 
 		 br  %t95  %forbodyBB4 %afterForBB4 
 		 jump %forbodyBB4
 
 %forbodyBB4:
 		 %j1  = move  16 
 		 jump %forcondBB5
 
 %forcondBB5:
 		 %t96  = slt  %j1   80 
 		 br  %t96  %forbodyBB5 %afterForBB5 
 		 jump %forbodyBB5
 
 %forbodyBB5:
 		 %t97  =   mul  %i1   4 
 		 %t98  =   add  %t97   4 
 		 %t99  =   add  @chunks   %t98 
 		 %t100  = load  %t99 
 		 %t101  =   mul  %j1   4 
 		 %t102  =   add  %t101   4 
 		 %t103  =   add  %t100   %t102 
 		 %t104  =   mul  %i1   4 
 		 %t105  =   add  %t104   4 
 		 %t106  =   add  @chunks   %t105 
 		 %t107  =   sub  %j1   3 
 		 %t108  = load  %t106 
 		 %t109  =   mul  %t107   4 
 		 %t110  =   add  %t109   4 
 		 %t111  =   add  %t108   %t110 
 		 %t112  =   mul  %i1   4 
 		 %t113  =   add  %t112   4 
 		 %t114  =   add  @chunks   %t113 
 		 %t115  =   sub  %j1   8 
 		 %t116  = load  %t114 
 		 %t117  =   mul  %t115   4 
 		 %t118  =   add  %t117   4 
 		 %t119  =   add  %t116   %t118 
 		 %t120  = load  %t111 
 		 %t121  = load  %t119 
 		 %t122  =   xor  %t120   %t121 
 		 %t123  =   mul  %i1   4 
 		 %t124  =   add  %t123   4 
 		 %t125  =   add  @chunks   %t124 
 		 %t126  =   sub  %j1   14 
 		 %t127  = load  %t125 
 		 %t128  =   mul  %t126   4 
 		 %t129  =   add  %t128   4 
 		 %t130  =   add  %t127   %t129 
 		 %t131  = load  %t130 
 		 %t132  =   xor  %t122   %t131 
 		 %t133  =   mul  %i1   4 
 		 %t134  =   add  %t133   4 
 		 %t135  =   add  @chunks   %t134 
 		 %t136  =   sub  %j1   16 
 		 %t137  = load  %t135 
 		 %t138  =   mul  %t136   4 
 		 %t139  =   add  %t138   4 
 		 %t140  =   add  %t137   %t139 
 		 %t141  = load  %t140 
 		 %t142  =   xor  %t132   %t141 
 		 %t143  =  call rotate_left  %t142   1   
 		 store  %t103   %t143 
 		 jump %forupdateBB4
 
 %forupdateBB4:
 		 %j1  =   add  %j1   1 
 		 jump %forcondBB5
 
 %afterForBB5:
 		 %a1  = move  %h01 
 		 %b1  = move  %h11 
 		 %c1  = move  %h21 
 		 %d1  = move  %h31 
 		 %e1  = move  %h41 
 		 %j1  = move  0 
 		 jump %forcondBB6
 
 %forcondBB6:
 		 %t144  = slt  %j1   80 
 		 br  %t144  %forbodyBB6 %afterForBB6 
 		 jump %forbodyBB6
 
 %forbodyBB6:
 		 %t145  = slt  %j1   20 
 		 br  %t145  %if_thenBB2 %if_elseBB1 
 
 %if_thenBB2:
 		 %t146  =   and  %b1   %c1 
 		 %t147  =  not  %b1 
 		 %t148  =   and  %t147   %d1 
 		 %t149  =   or  %t146   %t148 
 		 %f1  = move  %t149 
 		 %k1  = move  1518500249 
 		 jump %if_end2
 
 %if_elseBB1:
 		 %t150  = slt  %j1   40 
 		 br  %t150  %if_thenBB3 %if_elseBB2 
 
 %if_thenBB3:
 		 %t151  =   xor  %b1   %c1 
 		 %t152  =   xor  %t151   %d1 
 		 %f1  = move  %t152 
 		 %k1  = move  1859775393 
 		 jump %if_end3
 
 %if_elseBB2:
 		 %t153  = slt  %j1   60 
 		 br  %t153  %if_thenBB4 %if_elseBB3 
 
 %if_thenBB4:
 		 %t154  =   and  %b1   %c1 
 		 %t155  =   and  %b1   %d1 
 		 %t156  =   or  %t154   %t155 
 		 %t157  =   and  %c1   %d1 
 		 %t158  =   or  %t156   %t157 
 		 %f1  = move  %t158 
 		 %t159  =  call lohi  48348   36635   
 		 %k1  = move  %t159 
 		 jump %if_end4
 
 %if_elseBB3:
 		 %t160  =   xor  %b1   %c1 
 		 %t161  =   xor  %t160   %d1 
 		 %f1  = move  %t161 
 		 %t162  =  call lohi  49622   51810   
 		 %k1  = move  %t162 
 		 jump %if_end4
 
 %if_end4:
 		 jump %if_end3
 
 %if_end3:
 		 jump %if_end2
 
 %if_end2:
 		 %t163  =  call rotate_left  %a1   5   
 		 %t164  =  call add  %t163   %e1   
 		 %t165  =  call add  %f1   %k1   
 		 %t166  =  call add  %t164   %t165   
 		 %t167  =   mul  %i1   4 
 		 %t168  =   add  %t167   4 
 		 %t169  =   add  @chunks   %t168 
 		 %t170  = load  %t169 
 		 %t171  =   mul  %j1   4 
 		 %t172  =   add  %t171   4 
 		 %t173  =   add  %t170   %t172 
 		 %t174  = load  %t173 
 		 %t175  =  call add  %t166   %t174   
 		 %temp1  = move  %t175 
 		 %e1  = move  %d1 
 		 %d1  = move  %c1 
 		 %t176  =  call rotate_left  %b1   30   
 		 %c1  = move  %t176 
 		 %b1  = move  %a1 
 		 %a1  = move  %temp1 
 		 jump %forupdateBB5
 
 %forupdateBB5:
 		 %j1  =   add  %j1   1 
 		 jump %forcondBB6
 
 %afterForBB6:
 		 %t177  =  call add  %h01   %a1   
 		 %h01  = move  %t177 
 		 %t178  =  call add  %h11   %b1   
 		 %h11  = move  %t178 
 		 %t179  =  call add  %h21   %c1   
 		 %h21  = move  %t179 
 		 %t180  =  call add  %h31   %d1   
 		 %h31  = move  %t180 
 		 %t181  =  call add  %h41   %e1   
 		 %h41  = move  %t181 
 		 jump %forupdateBB6
 
 %forupdateBB6:
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB4
 
 %afterForBB4:
 		 %t182  =   mul  0   4 
 		 %t183  =   add  %t182   4 
 		 %t184  =   add  @outputBuffer   %t183 
 		 store  %t184   %h01 
 		 %t185  =   mul  1   4 
 		 %t186  =   add  %t185   4 
 		 %t187  =   add  @outputBuffer   %t186 
 		 store  %t187   %h11 
 		 %t188  =   mul  2   4 
 		 %t189  =   add  %t188   4 
 		 %t190  =   add  @outputBuffer   %t189 
 		 store  %t190   %h21 
 		 %t191  =   mul  3   4 
 		 %t192  =   add  %t191   4 
 		 %t193  =   add  @outputBuffer   %t192 
 		 store  %t193   %h31 
 		 %t194  =   mul  4   4 
 		 %t195  =   add  %t194   4 
 		 %t196  =   add  @outputBuffer   %t195 
 		 store  %t196   %h41 
 		 %mergedretVal1  = move  @outputBuffer 
 		 jump %sha1.exitBB1
 
 %sha1.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define i32 @int2chr  %x1  {
 %int2chr.entryBB1:
 		 %t1  = sge  %x1   32 
 		 br  %t1  %ifTrue1 %if_end1 
 
 %ifTrue1:
 		 %t2  = sle  %x1   126 
 		 br  %t2  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 %t3  =   sub  %x1   32 
 		 %t4  =   sub  %x1   31 
 		 %t5  =  call string.substring  @asciiTable %t3   %t4   
 		 %mergedretVal1  = move  %t5 
 		 jump %int2chr.exitBB1
 
 %if_end1:
 		 %mergedretVal1  = move  @constStr_0 
 		 jump %int2chr.exitBB1
 
 %int2chr.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define i32 @rotate_left  %x1 %shift1  {
 %rotate_left.entryBB1:
 		 %t1  = seq  %shift1   1 
 		 br  %t1  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 		 %t2  =   and  %x1   2147483647 
 		 %t3  =   shl  %t2   1 
 		 %t4  =   shr  %x1   31 
 		 %t5  =   and  %t4   1 
 		 %t6  =   or  %t3   %t5 
 		 %mergedretVal1  = move  %t6 
 		 jump %rotate_left.exitBB1
 
 %if_end1:
 		 %t7  = seq  %shift1   31 
 		 br  %t7  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 		 %t8  =   and  %x1   1 
 		 %t9  =   shl  %t8   31 
 		 %t10  =   shr  %x1   1 
 		 %t11  =   and  %t10   2147483647 
 		 %t12  =   or  %t9   %t11 
 		 %mergedretVal1  = move  %t12 
 		 jump %rotate_left.exitBB1
 
 %if_end2:
 		 %t13  =   sub  32   %shift1 
 		 %t14  =   shl  1   %t13 
 		 %t15  =   sub  %t14   1 
 		 %t16  =   and  %x1   %t15 
 		 %t17  =   shl  %t16   %shift1 
 		 %t18  =   sub  32   %shift1 
 		 %t19  =   shr  %x1   %t18 
 		 %t20  =   shl  1   %shift1 
 		 %t21  =   sub  %t20   1 
 		 %t22  =   and  %t19   %t21 
 		 %t23  =   or  %t17   %t22 
 		 %mergedretVal1  = move  %t23 
 		 jump %rotate_left.exitBB1
 
 %rotate_left.exitBB1:
 		 ret  %mergedretVal1 
 
 }
 define i32 @lohi  %lo1 %hi1  {
 %lohi.entryBB1:
 		 %t1  =   shl  %hi1   16 
 		 %t2  =   or  %lo1   %t1 
 		 ret  %t2 
 
 }
 define void @__init   {
 %__init.entryBB1:
 		 @asciiTable  = move  @constStr_2 
 		 @MAXCHUNK  = move  100 
 		 %t1  =   sub  @MAXCHUNK   1 
 		 %t2  =   mul  %t1   64 
 		 %t3  =   sub  %t2   16 
 		 @MAXLENGTH  = move  %t3 
 		 %t4  =   mul  @MAXCHUNK   4 
 		 %t4  =   add  %t4   4 
 		 %t5  = alloc  %t4 
 		 store  %t5   @MAXCHUNK 
 		 %t6  = move  %t5 
 		 %t6  =   add  %t6   4 
 		 %t7  = move  4 
 		 %t7  =   mul  %t7   @MAXCHUNK 
 		 %t8  = move  %t5 
 		 %t8  =   add  %t8   %t7 
 		 jump %forcondBB1
 
 %forcondBB1:
 		 %t9  = sle  %t6   %t8 
 		 br  %t9  %forupdateBB1 %afterForBB1 
 
 %forupdateBB1:
 		 %t10  =   mul  80   4 
 		 %t10  =   add  %t10   4 
 		 %t11  = alloc  %t10 
 		 store  %t11   80 
 		 store  %t6   %t11 
 		 %t6  =   add  %t6   4 
 		 jump %forcondBB1
 
 %afterForBB1:
 		 @chunks  = move  %t5 
 		 %t12  =   mul  @MAXLENGTH   4 
 		 %t12  =   add  %t12   4 
 		 %t13  = alloc  %t12 
 		 store  %t13   @MAXLENGTH 
 		 @inputBuffer  = move  %t13 
 		 %t14  =   mul  5   4 
 		 %t14  =   add  %t14   4 
 		 %t15  = alloc  %t14 
 		 store  %t15   5 
 		 @outputBuffer  = move  %t15 
 		 %t16  =  call main  
 		 ret  
 
 }
