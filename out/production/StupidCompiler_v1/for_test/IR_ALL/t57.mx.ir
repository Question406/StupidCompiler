 @constStr_0 = "3"
 @constStr_1 = "2"
 @constStr_2 = "1"
 @constStr_3 = " "
 @n 
 define void @init   {
 %init.entryBB1:
 preds:  
 doms:  %init.entryBB1  
 		 %t1  =  call getInt  
 		 @n  = move  %t1 
 		 ret  
 
 }
 define void @work   {
 %work.entryBB1:
 preds:  
 doms:  %work.entryBB1  
 		 %t1  =   sub  0   1 
 		 call find  @n   %t1   
 		 ret  
 
 }
 define i32 @main   {
 %main.entryBB1:
 preds:  
 doms:  %main.entryBB1  
 		 call init  
 		 call work  
 		 ret  0 
 
 }
 define i32 @is_prime  %x1  {
 %is_prime.entryBB1:
 preds:  
 doms:  %is_prime.entryBB1  
 		 %t1  = seq  %x1   1 
 		 br  %t1  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 preds:  %is_prime.entryBB1  
 doms:  %is_prime.entryBB1  %if_thenBB1  
 		 %mergedretVal1  = move  0 
 		 jump %is_prime.exitBB1
 
 %if_end1:
 preds:  %is_prime.entryBB1  
 doms:  %is_prime.entryBB1  %if_end1  
 		 %i1  = move  2 
 		 jump %forcondBB1
 
 %forcondBB1:
 preds:  %if_end1  %forupdateBB1  
 doms:  %is_prime.entryBB1  %forcondBB1  %if_end1  
 		 %t2  =   mul  %i1   %i1 
 		 %t3  = sle  %t2   %x1 
 		 br  %t3  %forbodyBB1 %afterForBB1 
 
 %afterForBB1:
 preds:  %forcondBB1  
 doms:  %is_prime.entryBB1  %forcondBB1  %if_end1  %afterForBB1  
 		 %mergedretVal1  = move  1 
 		 jump %is_prime.exitBB1
 
 %forbodyBB1:
 preds:  %forcondBB1  
 doms:  %forbodyBB1  %is_prime.entryBB1  %forcondBB1  %if_end1  
 		 %t4  =   mod  %x1   %i1 
 		 %t5  = seq  %t4   0 
 		 br  %t5  %if_thenBB2 %if_end2 
 
 %if_end2:
 preds:  %forbodyBB1  
 doms:  %forbodyBB1  %is_prime.entryBB1  %forcondBB1  %if_end1  %if_end2  
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %if_end2  
 doms:  %forbodyBB1  %is_prime.entryBB1  %forcondBB1  %if_end1  %forupdateBB1  %if_end2  
 		 %i1  =   add  %i1   1 
 		 jump %forcondBB1
 
 %if_thenBB2:
 preds:  %forbodyBB1  
 doms:  %forbodyBB1  %if_thenBB2  %is_prime.entryBB1  %forcondBB1  %if_end1  
 		 %mergedretVal1  = move  0 
 		 jump %is_prime.exitBB1
 
 %is_prime.exitBB1:
 preds:  %if_thenBB2  %if_thenBB1  %afterForBB1  
 doms:  %is_prime.entryBB1  %is_prime.exitBB1  
 		 ret  %mergedretVal1 
 
 }
 define void @find  %x1 %pre1  {
 %find.entryBB1:
 preds:  
 doms:  %find.entryBB1  
 		 %t1  =  call is_prime  %x1   
 		 br  %t1  %if_thenBB1 %if_end1 
 
 %if_end1:
 preds:  %find.entryBB1  
 doms:  %find.entryBB1  %if_end1  
 		 %i1  = move  5 
 		 %t2  =   sub  0   1 
 		 %t3  = seq  %pre1   %t2 
 		 br  %t3  %if_thenBB2 %if_elseBB1 
 
 %if_elseBB1:
 preds:  %if_end1  
 doms:  %find.entryBB1  %if_elseBB1  %if_end1  
 		 %t4  =   sub  %x1   1 
 		 %i1  = move  %t4 
 		 jump %forbodyBB1
 
 %forbodyBB1:
 preds:  %forupdateBB1  %if_elseBB1  
 doms:  %if_elseBB1  %if_end1  %find.entryBB1  %forbodyBB1  
 		 %t5  =  call is_prime  %i1   
 		 br  %t5  %ifTrue1 %if_end2 
 
 %ifTrue1:
 preds:  %forbodyBB1  
 doms:  %ifTrue1  %find.entryBB1  %if_elseBB1  %forbodyBB1  %if_end1  
 		 %t6  =   sub  %x1   %i1 
 		 %t7  =  call is_prime  %t6   
 		 br  %t7  %if_thenBB3 %if_end2 
 
 %if_thenBB3:
 preds:  %ifTrue1  
 doms:  %ifTrue1  %find.entryBB1  %if_thenBB3  %if_elseBB1  %forbodyBB1  %if_end1  
 		 %t8  =  call println  @constStr_0   
 		 %t9  =  call toString  %pre1   
 		 %t10  =  call string.add  %t9   @constStr_3   
 		 %t11  =  call toString  %i1   
 		 %t12  =  call string.add  %t10   %t11   
 		 %t13  =  call string.add  %t12   @constStr_3   
 		 %t14  =   sub  %x1   %i1 
 		 %t15  =  call toString  %t14   
 		 %t16  =  call string.add  %t13   %t15   
 		 %t17  =  call println  %t16   
 		 jump %find.exitBB1
 
 %if_end2:
 preds:  %ifTrue1  %forbodyBB1  
 doms:  %find.entryBB1  %if_end2  %if_elseBB1  %forbodyBB1  %if_end1  
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %if_end2  
 doms:  %find.entryBB1  %if_end2  %forupdateBB1  %if_elseBB1  %forbodyBB1  %if_end1  
 		 %i1  =   sub  %i1   1 
 		 jump %forbodyBB1
 
 %if_thenBB2:
 preds:  %if_end1  
 doms:  %find.entryBB1  %if_thenBB2  %if_end1  
 		 %i2  = move  6 
 		 %t18  =   sub  %x1   2 
 		 %i2  = move  %t18 
 		 jump %forbodyBB2
 
 %forbodyBB2:
 preds:  %if_thenBB2  %forupdateBB2  
 doms:  %find.entryBB1  %if_thenBB2  %forbodyBB2  %if_end1  
 		 %t19  =  call is_prime  %i2   
 		 br  %t19  %if_thenBB4 %if_end3 
 
 %if_end3:
 preds:  %forbodyBB2  
 doms:  %find.entryBB1  %if_thenBB2  %forbodyBB2  %if_end1  %if_end3  
 		 jump %forupdateBB2
 
 %forupdateBB2:
 preds:  %if_end3  
 doms:  %find.entryBB1  %if_thenBB2  %forbodyBB2  %if_end1  %if_end3  %forupdateBB2  
 		 %i2  =   sub  %i2   1 
 		 jump %forbodyBB2
 
 %if_thenBB4:
 preds:  %forbodyBB2  
 doms:  %find.entryBB1  %if_thenBB2  %forbodyBB2  %if_thenBB4  %if_end1  
 		 %t20  =   sub  %x1   %i2 
 		 call find  %t20   %i2   
 		 jump %find.exitBB1
 
 %if_thenBB1:
 preds:  %find.entryBB1  
 doms:  %find.entryBB1  %if_thenBB1  
 		 %t21  = sgt  %pre1   0 
 		 br  %t21  %if_thenBB5 %if_elseBB2 
 
 %if_thenBB5:
 preds:  %if_thenBB1  
 doms:  %find.entryBB1  %if_thenBB1  %if_thenBB5  
 		 %t22  =  call println  @constStr_1   
 		 %t23  =  call toString  %pre1   
 		 %t24  =  call string.add  %t23   @constStr_3   
 		 %t25  =  call toString  %x1   
 		 %t26  =  call string.add  %t24   %t25   
 		 %t27  =  call println  %t26   
 		 jump %if_end4
 
 %if_elseBB2:
 preds:  %if_thenBB1  
 doms:  %if_elseBB2  %find.entryBB1  %if_thenBB1  
 		 %t28  =  call println  @constStr_2   
 		 %t29  =  call toString  %x1   
 		 %t30  =  call println  %t29   
 		 jump %if_end4
 
 %if_end4:
 preds:  %if_elseBB2  %if_thenBB5  
 doms:  %find.entryBB1  %if_end4  %if_thenBB1  
 		 jump %find.exitBB1
 
 %find.exitBB1:
 preds:  %if_end4  %if_thenBB4  %if_thenBB3  %if_end5  
 doms:  %find.entryBB1  %find.exitBB1  
 		 ret  
 
 }
 define void @__init   {
 %__init.entryBB1:
 preds:  
 doms:  %__init.entryBB1  
 		 %t1  =  call main  
 		 ret  
 
 }
