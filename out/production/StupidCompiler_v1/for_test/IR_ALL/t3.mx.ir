 @constStr_0 = "no solution!\n"
 @tail 
 @targety 
 @targetx 
 @i 
 @j 
 @ylist 
 @N 
 @head 
 @dx 
 @dy 
 @now 
 @x 
 @y 
 @starty 
 @step 
 @startx 
 @xlist 
 @ok 
 define void @origin  %N1  {
 %origin.entryBB1:
 preds:  
 doms:  %origin.entryBB1  
 		 @head  = move  0 
 		 @tail  = move  0 
 		 %t1  =   mul  %N1   4 
 		 %t1  =   add  %t1   4 
 		 %t2  = alloc  %t1 
 		 store  %t2   %N1 
 		 @step  = move  %t2 
 		 @i  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 preds:  %forupdateBB1  %origin.entryBB1  
 doms:  %origin.entryBB1  %forcondBB1  
 		 %t3  = slt  @i   %N1 
 		 br  %t3  %forbodyBB1 %afterForBB1 
 
 %afterForBB1:
 preds:  %forcondBB1  
 doms:  %origin.entryBB1  %forcondBB1  %afterForBB1  
 		 ret  
 
 %forbodyBB1:
 preds:  %forcondBB1  
 doms:  %origin.entryBB1  %forbodyBB1  %forcondBB1  
 		 %t4  =   mul  @i   4 
 		 %t5  =   add  %t4   4 
 		 %t6  =   add  @step   %t5 
 		 %t7  =   mul  %N1   4 
 		 %t7  =   add  %t7   4 
 		 %t8  = alloc  %t7 
 		 store  %t8   %N1 
 		 store  %t6   %t8 
 		 @j  = move  0 
 		 jump %forcondBB2
 
 %forcondBB2:
 preds:  %forbodyBB1  %forupdateBB2  
 doms:  %origin.entryBB1  %forbodyBB1  %forcondBB1  %forcondBB2  
 		 %t9  = slt  @j   %N1 
 		 br  %t9  %forbodyBB2 %afterForBB2 
 
 %afterForBB2:
 preds:  %forcondBB2  
 doms:  %origin.entryBB1  %afterForBB2  %forbodyBB1  %forcondBB1  %forcondBB2  
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %afterForBB2  
 doms:  %forupdateBB1  %origin.entryBB1  %afterForBB2  %forbodyBB1  %forcondBB1  %forcondBB2  
 		 @i  =   add  @i   1 
 		 jump %forcondBB1
 
 %forbodyBB2:
 preds:  %forcondBB2  
 doms:  %forbodyBB2  %origin.entryBB1  %forbodyBB1  %forcondBB1  %forcondBB2  
 		 %t10  =   mul  @i   4 
 		 %t11  =   add  %t10   4 
 		 %t12  =   add  @step   %t11 
 		 %t13  = load  %t12 
 		 %t14  =   mul  @j   4 
 		 %t15  =   add  %t14   4 
 		 %t16  =   add  %t13   %t15 
 		 store  %t16   0 
 		 jump %forupdateBB2
 
 %forupdateBB2:
 preds:  %forbodyBB2  
 doms:  %forbodyBB2  %origin.entryBB1  %forbodyBB1  %forupdateBB2  %forcondBB1  %forcondBB2  
 		 @j  =   add  @j   1 
 		 jump %forcondBB2
 
 }
 define i32 @main   {
 %main.entryBB1:
 preds:  
 doms:  %main.entryBB1  
 		 call origin  106   
 		 %t1  =  call getInt  
 		 @N  = move  %t1 
 		 %t2  =   sub  @N   1 
 		 @targety  = move  %t2 
 		 @targetx  = move  @targety 
 		 @i  = move  0 
 		 jump %forcondBB1
 
 %forcondBB1:
 preds:  %main.entryBB1  %forupdateBB1  
 doms:  %forcondBB1  %main.entryBB1  
 		 %t3  = slt  @i   @N 
 		 br  %t3  %forbodyBB1 %afterForBB1 
 
 %forbodyBB1:
 preds:  %forcondBB1  
 doms:  %forcondBB1  %main.entryBB1  %forbodyBB1  
 		 @j  = move  0 
 		 jump %forcondBB2
 
 %forcondBB2:
 preds:  %forbodyBB1  %forupdateBB2  
 doms:  %forcondBB1  %main.entryBB1  %forbodyBB1  %forcondBB2  
 		 %t4  = slt  @j   @N 
 		 br  %t4  %forbodyBB2 %afterForBB2 
 
 %forbodyBB2:
 preds:  %forcondBB2  
 doms:  %forcondBB1  %main.entryBB1  %forbodyBB2  %forbodyBB1  %forcondBB2  
 		 %t5  =   mul  @i   4 
 		 %t6  =   add  %t5   4 
 		 %t7  =   add  @step   %t6 
 		 %t8  = load  %t7 
 		 %t9  =   mul  @j   4 
 		 %t10  =   add  %t9   4 
 		 %t11  =   add  %t8   %t10 
 		 %t12  =   sub  0   1 
 		 store  %t11   %t12 
 		 jump %forupdateBB2
 
 %forupdateBB2:
 preds:  %forbodyBB2  
 doms:  %forcondBB1  %main.entryBB1  %forbodyBB2  %forbodyBB1  %forupdateBB2  %forcondBB2  
 		 @j  =   add  @j   1 
 		 jump %forcondBB2
 
 %afterForBB2:
 preds:  %forcondBB2  
 doms:  %afterForBB2  %forcondBB1  %main.entryBB1  %forbodyBB1  %forcondBB2  
 		 jump %forupdateBB1
 
 %forupdateBB1:
 preds:  %afterForBB2  
 doms:  %afterForBB2  %forcondBB1  %main.entryBB1  %forupdateBB1  %forbodyBB1  %forcondBB2  
 		 @i  =   add  @i   1 
 		 jump %forcondBB1
 
 %afterForBB1:
 preds:  %forcondBB1  
 doms:  %forcondBB1  %main.entryBB1  %afterForBB1  
 		 %t13  =   mul  0   4 
 		 %t14  =   add  %t13   4 
 		 %t15  =   add  @dx   %t14 
 		 %t16  =   sub  0   2 
 		 store  %t15   %t16 
 		 %t17  =   mul  0   4 
 		 %t18  =   add  %t17   4 
 		 %t19  =   add  @dy   %t18 
 		 %t20  =   sub  0   1 
 		 store  %t19   %t20 
 		 %t21  =   mul  1   4 
 		 %t22  =   add  %t21   4 
 		 %t23  =   add  @dx   %t22 
 		 %t24  =   sub  0   2 
 		 store  %t23   %t24 
 		 %t25  =   mul  1   4 
 		 %t26  =   add  %t25   4 
 		 %t27  =   add  @dy   %t26 
 		 store  %t27   1 
 		 %t28  =   mul  2   4 
 		 %t29  =   add  %t28   4 
 		 %t30  =   add  @dx   %t29 
 		 store  %t30   2 
 		 %t31  =   mul  2   4 
 		 %t32  =   add  %t31   4 
 		 %t33  =   add  @dy   %t32 
 		 %t34  =   sub  0   1 
 		 store  %t33   %t34 
 		 %t35  =   mul  3   4 
 		 %t36  =   add  %t35   4 
 		 %t37  =   add  @dx   %t36 
 		 store  %t37   2 
 		 %t38  =   mul  3   4 
 		 %t39  =   add  %t38   4 
 		 %t40  =   add  @dy   %t39 
 		 store  %t40   1 
 		 %t41  =   mul  4   4 
 		 %t42  =   add  %t41   4 
 		 %t43  =   add  @dx   %t42 
 		 %t44  =   sub  0   1 
 		 store  %t43   %t44 
 		 %t45  =   mul  4   4 
 		 %t46  =   add  %t45   4 
 		 %t47  =   add  @dy   %t46 
 		 %t48  =   sub  0   2 
 		 store  %t47   %t48 
 		 %t49  =   mul  5   4 
 		 %t50  =   add  %t49   4 
 		 %t51  =   add  @dx   %t50 
 		 %t52  =   sub  0   1 
 		 store  %t51   %t52 
 		 %t53  =   mul  5   4 
 		 %t54  =   add  %t53   4 
 		 %t55  =   add  @dy   %t54 
 		 store  %t55   2 
 		 %t56  =   mul  6   4 
 		 %t57  =   add  %t56   4 
 		 %t58  =   add  @dx   %t57 
 		 store  %t58   1 
 		 %t59  =   mul  6   4 
 		 %t60  =   add  %t59   4 
 		 %t61  =   add  @dy   %t60 
 		 %t62  =   sub  0   2 
 		 store  %t61   %t62 
 		 %t63  =   mul  7   4 
 		 %t64  =   add  %t63   4 
 		 %t65  =   add  @dx   %t64 
 		 store  %t65   1 
 		 %t66  =   mul  7   4 
 		 %t67  =   add  %t66   4 
 		 %t68  =   add  @dy   %t67 
 		 store  %t68   2 
 		 jump %whileCondBB1
 
 %whileCondBB1:
 preds:  %if_end1  %afterForBB1  
 doms:  %forcondBB1  %afterForBB1  %main.entryBB1  %whileCondBB1  
 		 %t69  = sle  @head   @tail 
 		 br  %t69  %whileBodyBB1 %afterWhileBB1 
 		 jump %whileBodyBB1
 
 %whileBodyBB1:
 preds:  %whileCondBB1  
 doms:  %whileBodyBB1  %forcondBB1  %afterForBB1  %main.entryBB1  %whileCondBB1  
 		 %t70  =   mul  @head   4 
 		 %t71  =   add  %t70   4 
 		 %t72  =   add  @xlist   %t71 
 		 %t73  = load  %t72 
 		 @x  = move  %t73 
 		 %t74  =   mul  @head   4 
 		 %t75  =   add  %t74   4 
 		 %t76  =   add  @ylist   %t75 
 		 %t77  = load  %t76 
 		 @y  = move  %t77 
 		 %t78  =   mul  @x   4 
 		 %t79  =   add  %t78   4 
 		 %t80  =   add  @step   %t79 
 		 %t81  = load  %t80 
 		 %t82  =   mul  @y   4 
 		 %t83  =   add  %t82   4 
 		 %t84  =   add  %t81   %t83 
 		 %t85  = load  %t84 
 		 @now  = move  %t85 
 		 @j  = move  0 
 		 jump %forcondBB3
 
 %forcondBB3:
 preds:  %whileBodyBB1  %forupdateBB3  
 doms:  %whileBodyBB1  %forcondBB1  %afterForBB1  %main.entryBB1  %forcondBB3  %whileCondBB1  
 		 %t86  = slt  @j   8 
 		 br  %t86  %forbodyBB3 %afterForBB3 
 
 %forbodyBB3:
 preds:  %forcondBB3  
 doms:  %whileBodyBB1  %forcondBB1  %afterForBB1  %main.entryBB1  %forcondBB3  %forbodyBB3  %whileCondBB1  
 		 %t87  =   mul  @j   4 
 		 %t88  =   add  %t87   4 
 		 %t89  =   add  @dx   %t88 
 		 %t90  = load  %t89 
 		 %t91  =   add  @x   %t90 
 		 %t92  =   mul  @j   4 
 		 %t93  =   add  %t92   4 
 		 %t94  =   add  @dy   %t93 
 		 %t95  = load  %t94 
 		 %t96  =   add  @y   %t95 
 		 call addList  %t91   %t96   
 		 jump %forupdateBB3
 
 %forupdateBB3:
 preds:  %forbodyBB3  
 doms:  %whileBodyBB1  %forupdateBB3  %forcondBB1  %afterForBB1  %main.entryBB1  %forcondBB3  %forbodyBB3  %whileCondBB1  
 		 @j  =   add  @j   1 
 		 jump %forcondBB3
 
 %afterForBB3:
 preds:  %forcondBB3  
 doms:  %whileBodyBB1  %forcondBB1  %afterForBB1  %main.entryBB1  %afterForBB3  %forcondBB3  %whileCondBB1  
 		 %t97  = seq  @ok   1 
 		 br  %t97  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 preds:  %afterForBB3  
 doms:  %whileBodyBB1  %forcondBB1  %afterForBB1  %main.entryBB1  %if_thenBB1  %afterForBB3  %forcondBB3  %whileCondBB1  
 		 jump %afterWhileBB1
 
 %afterWhileBB1:
 preds:  %if_thenBB1  %whileCondBB1  
 doms:  %forcondBB1  %afterForBB1  %main.entryBB1  %afterWhileBB1  %whileCondBB1  
 		 %t98  = seq  @ok   1 
 		 br  %t98  %if_thenBB2 %if_elseBB1 
 
 %if_elseBB1:
 preds:  %afterWhileBB1  
 doms:  %forcondBB1  %afterForBB1  %main.entryBB1  %if_elseBB1  %afterWhileBB1  %whileCondBB1  
 		 %t99  =  call print  @constStr_0   
 		 jump %if_end2
 
 %if_thenBB2:
 preds:  %afterWhileBB1  
 doms:  %if_thenBB2  %forcondBB1  %afterForBB1  %main.entryBB1  %afterWhileBB1  %whileCondBB1  
 		 %t100  =   mul  @targetx   4 
 		 %t101  =   add  %t100   4 
 		 %t102  =   add  @step   %t101 
 		 %t103  = load  %t102 
 		 %t104  =   mul  @targety   4 
 		 %t105  =   add  %t104   4 
 		 %t106  =   add  %t103   %t105 
 		 %t107  = load  %t106 
 		 %t108  =  call toString  %t107   
 		 %t109  =  call println  %t108   
 		 jump %if_end2
 
 %if_end2:
 preds:  %if_thenBB2  %if_elseBB1  
 doms:  %forcondBB1  %afterForBB1  %main.entryBB1  %afterWhileBB1  %whileCondBB1  %if_end2  
 		 ret  0 
 
 %if_end1:
 preds:  %afterForBB3  
 doms:  %whileBodyBB1  %forcondBB1  %if_end1  %afterForBB1  %main.entryBB1  %afterForBB3  %forcondBB3  %whileCondBB1  
 		 @head  =   add  @head   1 
 		 jump %whileCondBB1
 
 }
 define i32 @check  %a1  {
 %check.entryBB1:
 preds:  
 doms:  %check.entryBB1  
 		 %t1  = slt  %a1   @N 
 		 %t2  = sge  %a1   0 
 		 %t3  =   and  %t1   %t2 
 		 ret  %t3 
 
 }
 define void @__init   {
 %__init.entryBB1:
 preds:  
 doms:  %__init.entryBB1  
 		 %t1  =   mul  12000   4 
 		 %t1  =   add  %t1   4 
 		 %t2  = alloc  %t1 
 		 store  %t2   12000 
 		 @xlist  = move  %t2 
 		 %t3  =   mul  12000   4 
 		 %t3  =   add  %t3   4 
 		 %t4  = alloc  %t3 
 		 store  %t4   12000 
 		 @ylist  = move  %t4 
 		 %t5  =   mul  8   4 
 		 %t5  =   add  %t5   4 
 		 %t6  = alloc  %t5 
 		 store  %t6   8 
 		 @dx  = move  %t6 
 		 %t7  =   mul  9   4 
 		 %t7  =   add  %t7   4 
 		 %t8  = alloc  %t7 
 		 store  %t8   9 
 		 @dy  = move  %t8 
 		 %t9  =  call main  
 		 ret  
 
 }
 define void @addList  %x1 %y1  {
 %addList.entryBB1:
 preds:  
 doms:  %addList.entryBB1  
 		 %t1  =  call check  %x1   
 		 br  %t1  %ifTrue1 %if_end1 
 
 %ifTrue1:
 preds:  %addList.entryBB1  
 doms:  %ifTrue1  %addList.entryBB1  
 		 %t2  =  call check  %y1   
 		 br  %t2  %ifTrue2 %if_end1 
 
 %ifTrue2:
 preds:  %ifTrue1  
 doms:  %ifTrue1  %addList.entryBB1  %ifTrue2  
 		 %t3  =   mul  %x1   4 
 		 %t4  =   add  %t3   4 
 		 %t5  =   add  @step   %t4 
 		 %t6  = load  %t5 
 		 %t7  =   mul  %y1   4 
 		 %t8  =   add  %t7   4 
 		 %t9  =   add  %t6   %t8 
 		 %t10  =   sub  0   1 
 		 %t11  = load  %t9 
 		 %t12  = seq  %t11   %t10 
 		 br  %t12  %if_thenBB1 %if_end1 
 
 %if_thenBB1:
 preds:  %ifTrue2  
 doms:  %ifTrue1  %if_thenBB1  %addList.entryBB1  %ifTrue2  
 		 @tail  =   add  @tail   1 
 		 %t13  =   mul  @tail   4 
 		 %t14  =   add  %t13   4 
 		 %t15  =   add  @xlist   %t14 
 		 store  %t15   %x1 
 		 %t16  =   mul  @tail   4 
 		 %t17  =   add  %t16   4 
 		 %t18  =   add  @ylist   %t17 
 		 store  %t18   %y1 
 		 %t19  =   mul  %x1   4 
 		 %t20  =   add  %t19   4 
 		 %t21  =   add  @step   %t20 
 		 %t22  = load  %t21 
 		 %t23  =   mul  %y1   4 
 		 %t24  =   add  %t23   4 
 		 %t25  =   add  %t22   %t24 
 		 %t26  =   add  @now   1 
 		 store  %t25   %t26 
 		 %t27  = seq  %x1   @targetx 
 		 br  %t27  %ifTrue3 %if_end2 
 
 %ifTrue3:
 preds:  %if_thenBB1  
 doms:  %ifTrue1  %ifTrue3  %if_thenBB1  %addList.entryBB1  %ifTrue2  
 		 %t28  = seq  %y1   @targety 
 		 br  %t28  %if_thenBB2 %if_end2 
 
 %if_thenBB2:
 preds:  %ifTrue3  
 doms:  %if_thenBB2  %ifTrue1  %ifTrue3  %if_thenBB1  %addList.entryBB1  %ifTrue2  
 		 @ok  = move  1 
 		 jump %if_end2
 
 %if_end2:
 preds:  %if_thenBB2  %ifTrue3  %if_thenBB1  
 doms:  %ifTrue1  %if_thenBB1  %if_end2  %addList.entryBB1  %ifTrue2  
 		 jump %if_end1
 
 %if_end1:
 preds:  %ifTrue1  %if_end2  %addList.entryBB1  %ifTrue2  
 doms:  %if_end1  %addList.entryBB1  
 		 ret  
 
 }
